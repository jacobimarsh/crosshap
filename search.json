[{"path":"https://jacobimarsh.github.io/crosshap/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 crosshap authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/articles/Delimiting_region.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Delimiting a region of interest","text":"Local haplotyping first foremost requires specification genomic region analyse. fundamental aim delimiting genomic region haplotype crosshap include minimum range sites sufficiently captures groups linked sites relevant trait feature interest. universally ‘correct’ way delimit region interest, instead decided upon carefully considering dataset, purpose analysis, genomic features surrounding prospective site. , ’ll look possible methods used delimit region interest.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/articles/Delimiting_region.html","id":"method-1-range-of-significant-snps-from-gwas","dir":"Articles","previous_headings":"","what":"Method 1: Range of significant SNPs from GWAS","title":"Delimiting a region of interest","text":"Trait-associated regions identified GWAS particularly suitable analysis crosshap phenotypic data used input can directly used input crosshap aid capturing characterizing informative haplotypes. However, crosshap characterises specific region interest, GWAS provides individual trait associated loci. General (GLM) mixed linear (MLM) GWAS models provide association results genomic sites, allows user delimit genomic region including variants distal loci possessing minimum level significance. GWAS method combines linked SNPs single loci (e.g. FarmCPU), can disentangle calculating pairwise linkage SNPs wider region delimit based furthest loci given threshold (e.g. R^2 GWAS SNP > 0.8).  method result region contains highly significant SNPs highly associated given trait.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/articles/Delimiting_region.html","id":"method-2-haplotype-block-boundaries","dir":"Articles","previous_headings":"","what":"Method 2: Haplotype block boundaries","title":"Delimiting a region of interest","text":"Sometimes may interested analysing linkage structures variants agnostic trait association information. cases visualized LD matrix (e.g.  using LDBlockShow) boundaries haplotype block (e.g. defined usingHaploview) may useful delimiting genomic region interest.  method result region high homogeneous internal linkage relative distal sites ensure ’re haplotyping region strong linkage patterns.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/articles/Delimiting_region.html","id":"method-3-gene-cluster","dir":"Articles","previous_headings":"","what":"Method 3: Gene cluster","title":"Delimiting a region of interest","text":"co-location two gene structures independent variants interest can useful delimiting region explore linkage patterns span . gene cluster ’re interested characterising, positions features can directly used boundaries region interest. can useful use method alongside testing general linkage region (Method 2).  method result region contains relevant genomic features, however may include breadth linkage patterns (.e. Marker Groups may extend beyond region analysed).","code":""},{"path":"https://jacobimarsh.github.io/crosshap/articles/Delimiting_region.html","id":"what-now","dir":"Articles","previous_headings":"","what":"What now?","title":"Delimiting a region of interest","text":"figuring boundaries region, next step subset VCF include SNP information region. extract region interest VCF, can use something like tabix command line, just make sure keep final header line starts ‘#CHR’: $ grep -m 1 '#CHR' .vcf > .region.vcf $ bgzip .vcf $ tabix .vcf.gz Chr1:100000-200000 >> .region.vcf Now VCF ready analysis crosshap! information look Getting started vignette.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/articles/Getting_started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started","text":"crosshap (R package) LD-based local haplotyping tool designed visualize patterns variation across loci individuals genomic region interest. tutorial ’ll walk example analysis help introduce describe main functions crosshap ’ll ready jump exploring data. data ’ll analyzing soybean data USDA core collection (Bayer et al. 2021). tutorial re-perform local haplotype analysis seed protein QTL, cqProt-003, crosshap (Marsh et al. 2022). data can downloaded crosshap example data figshare repository.","code":"install.packages(\"devtools\") devtools::install_github(\"jacobimarsh/crosshap\") library(crosshap)"},{"path":"https://jacobimarsh.github.io/crosshap/articles/Getting_started.html","id":"preparing-inputs","dir":"Articles","previous_headings":"","what":"Preparing inputs","title":"Getting started","text":"inputs helper function provided crosshap help read consistently. tutorial, ’ll need download crosshap example data save local directory. VCF contains genomic variation (SNP) information 985 accessions. sites within 173kb trait associated region interest present VCF, along header information labeling individual. data filtered imputed; currently biallelic variant sites supported crosshap. suggest filter data prior analysis, though imputation optional often preferable keep unimputed. information best isolate region, take look vignette: Delimiting region interest. LD matrix provides pairwise linkage information SNP loci within region interest (173kb). LD metric captures pairwise correlation scale 0 (unlinked) 1 (fully linked) may used, including D’, R^2, R^2 corrected kinship population structure. example, using R^2 values. LD file must square correlation matrix using loci present vcf, ordered position, without position labels (vcf object must provided position labels missing). simple R^2 matrix can calculated using PLINK (Purcell et al 2007) output can directly used input: Phenotype scores , least individuals VCF necessary uncovering trait-associated genomic variation haplotypes. Given tutorial analyzes seed protein QTL, seed protein % phenotype provided example. Metadata grouping labels distinct subpopulations dataset can aid interpreting haplotyping results. example provides level domestication individual, including undomesticated wild-type soy (wt), domesticated landraces (lr), domesticated cultivars improved advanced breeding (ocult) improved modern cultivars (mcult).","code":"#Read example data into R and standardize using helper functions vcf <- read_vcf('path/to/fin_b51_173kb_only.vcf') #VCF is provided as additional argument to help assign column and row names LD <- read_LD('path/to/plink.ld', vcf = vcf) pheno <- read_pheno('path/to/sprot_phen.txt') metadata <- read_metadata('path/to/namepopfile.txt') head(vcf, c(4,11)) #> # A tibble: 4 × 11 #>   `#CHROM`    POS ID    REF   ALT   QUAL  FILTER INFO  FORMAT SRR1533182 USB.129 #>   <chr>     <dbl> <chr> <chr> <chr> <chr> <chr>  <chr> <chr>  <chr>      <chr>   #> 1 20       3.16e7 20_3… C     A     .     PASS   .     GT     1|0        0|0     #> 2 20       3.16e7 20_3… C     T     .     PASS   .     GT     0|0        0|0     #> 3 20       3.16e7 20_3… A     G     .     PASS   .     GT     1|0        0|0     #> 4 20       3.16e7 20_3… C     T     .     PASS   .     GT     0|0        0|0 head(LD, c(4,4)) #>             20_31604185 20_31604420 20_31604498 20_31604889 #> 20_31604185        1.00        0.00        0.24        0.96 #> 20_31604420        0.00        1.00        0.29        0.00 #> 20_31604498        0.24        0.29        1.00        0.23 #> 20_31604889        0.96        0.00        0.23        1.00 head(pheno, n = 4) #> # A tibble: 4 × 2 #>   Ind   Pheno #>   <chr> <dbl> #> 1 AB.01  44   #> 2 AB.02  50.5 #> 3 BR.24  43.9 #> 4 ESS    45.5 head(metadata, n = 4) #> # A tibble: 4 × 2 #>   Ind   Metadata #>   <chr> <chr>    #> 1 AB.01 lr       #> 2 AB.02 lr       #> 3 BR.01 mcult    #> 4 BR.02 mcult"},{"path":"https://jacobimarsh.github.io/crosshap/articles/Getting_started.html","id":"local-haplotyping","dir":"Articles","previous_headings":"","what":"Local haplotyping","title":"Getting started","text":"Local haplotyping involves classifying individuals shared haplotypes (combinations alleles) across loci within region interest. crosshap, haplotypes defined individual loci rather allelic combinations Marker Groups. Marker Groups clusters tightly linked SNPs typically inherited unit throughout population. explanatory visualization showing Marker Group SNPs inform haplotyping crosshap, take look vignette: Haplotype UMAP GIF. clustering algorithm used capture Marker Groups DBSCAN (Ester et al. 1996) two main parameters crosshap: MGmin epsilon. MGmin (minPts) minimum number linked SNPs cluster classified Marker Group instead background noise. example (2041 SNPs 173kb region), MGmin 30 chosen. Epsilon roughly translates cluster density, epsilon increases, SNPs typically included Marker Groups. stage ’s worth providing range epsilons can pick best one later. dataset lot SNPs (2041 loci), range epsilons test quite low (0.2 - 1). Now ’ve got inputs parameters ready, ’s time run haplotyping! everything went plan, haplotype object saved HapObject haplotyping results five provided epsilon values. haplotype object needed build crosshap visualizations (along chosen epsilon visualize!). MGmin value set based size, density linkage decay dataset. give scale: 300kb region 3000 SNPs may appropriately captured MGmin range 20-40, depending desired granularity. contrast, 50kb region 100 SNPs may work better MGmin 5-15.","code":"#Add minimum Marker Group SNP count MGmin <- 30 #Add list of epsilon values to run haplotyping on epsilon <- c(0.2,0.4,0.6,0.8,1) #Run the haplotyping at all provided epsilon values HapObject <- run_haplotyping(vcf = vcf,                 LD = LD,                 pheno = pheno,                 metadata = metadata,                 epsilon = epsilon,                 MGmin = MGmin)"},{"path":"https://jacobimarsh.github.io/crosshap/articles/Getting_started.html","id":"optimizing-the-clustering-resolution","dir":"Articles","previous_headings":"","what":"Optimizing the clustering resolution","title":"Getting started","text":"Epsilon notoriously difficult parameter optimize DBSCAN, tool used cluster SNPs Marker Groups haplotyping crosshap. Thankfully, crosshap clustree (Zappia et al 2018) wrapper summarizes differences haplotype objects created different epsilon values help pick best one. first clustering tree option provides summary changes haplotype groups resolved different epsilon values.  row nodes represents different haplotypes (-Z) idenfied specific epsilon resolution (reported right). size node indicates frequency individuals possess given haplotype colour reflects mean phenotype score population individuals. ‘0’ node left represents population individuals placed haplotype. arrows row indicates individuals upper haplotype node present lower haplotype node, opacity reflecting proportion individuals. may notice number haplotypes identified changes three populations epsilon = 0.2 six populations epsilon = 0.6, though remains constant six haplotype populations epsilon increases 1. good sign haplotypes identified epsilon range (0.6 - 1) robust effectively capture distinct genetic structure across population region interest. addition, range colours present rows nodes corresponding epsilons 0.6 - 1 indicates ’s phenotypic diversity large haplotype average low phenotype score (seed protein %), smaller haplotypes E F average higher phenotype scores. Given factors, lets pick smallest ‘stable’ epsilon value, 0.6, investigate full crosshap visualization. analyses interested linked SNPs may causal phenotypic trait variation, may markers causal variants. case, picking clustering resolution (epsilon) optimal capturing informative Marker Groups goal. clustree wrapper provided crosshap MG option capturing changes Marker Groups, rather haplotypes, results using different epsilon values. type = 'MG', nodes instead represent Marker Groups, size indicating number SNPs, colour reflecting phenotypic association given Marker Groups. ‘0’ group represents background SNPs aren’t assigned Marker Group.","code":"#HapObject created by `run_haplotyping` #Add type = 'hap' to ensure it summarizes haplotypes rather than Marker Groups hap_clustree <- clustree_viz(HapObject,                               type = 'hap') hap_clustree #HapObject created by `run_haplotyping` #Add type = 'MG' to ensure it summarizes Marker Groups rather than haplotypes MG_clustree <- clustree_viz(HapObject = HapObject,                               type = 'MG') MG_clustree"},{"path":"https://jacobimarsh.github.io/crosshap/articles/Getting_started.html","id":"visualizing-local-haplotypes","dir":"Articles","previous_headings":"","what":"Visualizing local haplotypes","title":"Getting started","text":"Now results ready haplotype object, picked optimal epsilon resolution dataset, ’s time visualize results full can start uncovering patterns variation! crosshap visualization, central matrix displays combinations Marker Group alleles define haplotype, provides grid around features Marker Group haplotype combination characterized. Features haplotypes individuals assigned visualized vertically, features top bottom plots. Features Marker Groups SNPs assigned visualized horizontally, features left right plots. idea eponymous crosshap visualization integrate Marker Group results (cluster SNPs) features haplotype populations (groups genetically similar individuals), allowing intuitively connect genetic variants individuals possess . One reasons ’s important capture figure often trends genetic variation captured Marker Groups can explained population structure across haplotypes - vice versa.  central matrix frequency individuals haplotype combination, breakdown provided metadata variable (level domestication). central matrix plotted phenotype scores (seed protein %) individual (dot individual), grouped haplotype coloured metadata variable, like top bar plot. Left central matrix summary allele frequency information Marker Groups (MG). indicates frequency minor allele, missing alleles, heterozygotes, reference alleles averaged across SNPs within Marker Group. Right central matrix plotted phenotypic association SNP (dot SNP), grouped Marker Group. ‘pheno association’ effectively difference phenotype scores individuals alternate compared reference alleles given SNP. table bottom right summarizes haplotype information table top right summarizes Marker Group information. guides shown bottom left.","code":"#Visualize haplotype object created by run_haplotyping() at the chosen epsilon (0.6) Hap_viz <- crosshap_viz(HapObject = HapObject, epsilon = 0.6) #> Registered S3 methods overwritten by 'ggpp': #>   method                  from    #>   heightDetails.titleGrob ggplot2 #>   widthDetails.titleGrob  ggplot2 Hap_viz #If it doesn't scale well in your plot viewer, try exporting it as an image with ggsave()"},{"path":"https://jacobimarsh.github.io/crosshap/articles/Getting_started.html","id":"interpreting-the-crosshap-visualization","dir":"Articles","previous_headings":"","what":"Interpreting the crosshap visualization","title":"Getting started","text":"Alright, lets use integrated visualization uncover biological findings put paper/report/grant application. Give crack , get stuck, look example findings . Looking top bar plot summary table bottom right, haplotype almost exclusively contains domesticated individuals including vast majority old modern improved cultivars. Haplotypes B, D E primarily contain wild-type individuals haplotypes C F appear landrace-specific.  Looking bottom phenotype plot, individuals haplotypes B-F (share alternate allele MG1) typically higher seed protein scores individuals haplotype . trend found wild-type specific haplotypes (B,D,E) also landrace-specific haplotypes C F indicating domesticated subpopulations may share causal high-protein mutation region.  looking central MG/hap matrix, can see Marker Groups ‘nested’ linkage MG1, meaning alternate alleles MG2-MG9 SNPs tend present alternate allele MG1 present. may indicate bottleneck, case due artificial selection variant tightly linked MG1, leading dramatically reduced genetic variation major domesticated haplotype .  Looking pheno association plot right, several Marker Groups appear trait-associated, particularly MG1 MG8. MG8 associated highest phenotypic effect (4.39), low minor allele frequency (0.03; see left allele count plot). contrast, MG1 substantially higher minor allele frequency (0.21), means phenotypic association MG1 statistical power.  MG1 strongest candidate Marker Groups analysis, may worth investigating functional annotations markers identify candidate causal variant, testing whether indels/structural variation linked MG1. MG8 also candidate analysis, though alternate allele MG8 found 18 landrace individuals high seed protein scores. result, may fruitful investigate subpopulation individuals haplotype F: geographic region? share unique biological features? rare landrace individuals haplotype F may interesting germplasm introgression studies.  Congratulations, first crosshap analysis! Now ’re ready equipped give go data :)","code":""},{"path":"https://jacobimarsh.github.io/crosshap/articles/Getting_started.html","id":"exporting-raw-results-and-individual-plots","dir":"Articles","previous_headings":"","what":"Exporting raw results and individual plots","title":"Getting started","text":"can closer look saved results looking elements within haplotype object. ideal exporting information individuals possess haplotype, SNPs within Marker Group analysis. Indfile reports haplotype assigned individual Hapfile reports identified haplotypes, Marker Group combinations Varfile reports information SNP, including Marker Group assignments ’re interested specific plot crosshap visualization, though don’t need full integrated figure, can build plots one-one stitch together like using patchwork package R (Pederson 2022). ’ll include top bottom plots relevant characterize haplotype populations.","code":"#Print first lines of haplotype object buckets for epsilon = 0.6 results. HapObject$Haplotypes_MGmin30_E0.6$Indfile HapObject$Haplotypes_MGmin30_E0.6$Hapfile HapObject$Haplotypes_MGmin30_E0.6$Varfile #Install patchwork if you don't have it using install.packages(\"patchwork\") library(patchwork)  #First lets build the top plot, keeping the guides with \"hide_labels = F\" top <- build_top_metaplot(HapObject = HapObject, epsilon = 0.6, hide_labels = F)  #Next lets build the bottom plot, hiding the guides with \"hide_labels = T\" bot <- build_bot_halfeyeplot(HapObject = HapObject, epsilon = 0.6, hide_labels = T)  #Now we can stitch them together with patchwork! hap_plots <- patchwork::wrap_plots(top, bot) + patchwork::plot_layout(ncol = 1) hap_plots"},{"path":"https://jacobimarsh.github.io/crosshap/articles/Getting_started.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Getting started","text":"BAYER, P. E., VALLIYODAN, B., HU, H., MARSH, J. ., YUAN, Y., VUONG, T. D., PATIL, G., SONG, Q., BATLEY, J., VARSHNEY, R. K., LAM, H. M., EDWARDS, D. & NGUYEN, H. T. 2021. Sequencing USDA core soybean collection reveals gene loss domestication breeding. Plant Genome, e20109. MARSH, J. ., HU, H., PETEREIT, J., BAYER, P. E., VALLIYODAN, B., BATLEY, J., NGUYEN, H. T. & EDWARDS, D. 2022. Haplotype mapping uncovers unexplored variation wild domesticated soybean major protein locus cqProt-003. Theor Appl Genet, 135, 1443-1455. PURCELL, S., NEALE, B., TODD-BROWN, K., THOMAS, L., FERREIRA, M. . R., BENDER, D., MALLER, J., SKLAR, P., DE BAKKER, P. . W., DALY, M. J. & SHAM, P. C. 2007. PLINK: tool set whole-genome association population-based linkage analyses. J Hum Genet, 81, 559-575. ESTER, M., KRIEGEL, H.-P., SANDER, J. & XU, X. density-based algorithm discovering clusters large spatial databases noise. Proceedings 2nd ACM International Conference Knowledge Discovery Data Mining (KDD), 1996. 226-231. PEDERSON, T. 2022. Patchwork: composer plots.https://patchwork.data-imaginist.com, https://github.com/thomasp85/patchwork. ZAPPIA, L. & OSHLACK, . 2018. Clustering trees: visualization evaluating clusterings multiple resolutions. Gigascience, 7.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/articles/hap_UMAP.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Haplotype UMAP GIF","text":"haplotypes, Marker Groups, allelic combinations unplaced loci, ’s lot data transformation crosshap performs point can difficult take step back appreciate genomic patterns shared individuals assigned haplotype. , ’ll make animated GIF help us visualize information. GIF doesn’t necessarily reveal details haplotypes, however can useful sanity check, get better understanding results reflect.","code":"#Load relevant libraries library(crosshap) library(umap) library(gganimate) library(ggplot2) library(dplyr) library(tibble)  #Read in example data (LD Matrix, VCF, Haplotype object and chosen epsilon) LD <- crosshap::LD vcf <- crosshap::vcf HapObject <- crosshap::HapObject epsilon <- 0.6"},{"path":"https://jacobimarsh.github.io/crosshap/articles/hap_UMAP.html","id":"umap","dir":"Articles","previous_headings":"","what":"UMAP","title":"Haplotype UMAP GIF","text":"Uniform Manifold Approximation Projection (UMAP) useful dimension reduction tool visualizing clustering results. brief, attempt co-locate points (SNPs) correlated (linkage) two-dimensional space, similar PCA. ’ll need set several UMAP parameters. data input UMAP can thankfully taken LD matrix provided crosshap haplotyping. n_neighbors match MGmin parameter provided crosshap haplotyping. final two parameters, min_dist spread need testing optimize.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/articles/hap_UMAP.html","id":"capturing-marker-groups-with-umap","dir":"Articles","previous_headings":"","what":"Capturing Marker Groups with UMAP","title":"Haplotype UMAP GIF","text":"First lets visualize Marker Groups UMAP can useful reference later, can help us optimize UMAP use map individuals.   full guide optimizing UMAP parameters beyond scope tutorial, MGumap plot ’ve created able help needed. goal optimizing UMAP find parameters co-locate SNPs Marker Group distinct clusters. Read information optimize min_dist don’t forget keep spread min_dist()!","code":"#Run UMAP on LD matrix to get x & y coordinates for plotting umap_in <- umap::umap(LD, min_dist = 2, spread = 2.5, n_neighbors = 30)  #Add UMAP coordinates to SNPs with Marker Group information MGumap_data <- umap_in$layout %>% tibble::as_tibble() %>%   cbind(rownames(umap_in$data)) %>% tibble::as_tibble() %>%   dplyr::rename(UMAP1 = V1, UMAP2 = V2, ID = 'rownames(umap_in$data)') %>% #HapObject$Haplotypes_MGmin30_E0.6$Varfile contains variant information at epsilon = 0.6   dplyr::left_join(HapObject$Haplotypes_MGmin30_E0.6$Varfile %>%                       dplyr::select(ID, MGs), by = \"ID\") %>%   dplyr::mutate(MGs = gsub('0', NA, MGs))  #Plot SNPs by UMAP coordinates, coloured by Marker Group  MGumap <- ggplot2::ggplot(MGumap_data, ggplot2::aes(x = UMAP1, y = UMAP2)) +   ggplot2::geom_point(alpha = 0.4, ggplot2::aes(colour = MGs), size = 1, na.rm = F)+   ggplot2::theme_minimal() +     ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(size = 5, alpha = 0.7), title = \"Marker group\"))  MGumap crosshap::build_mid_dotplot(HapObject, epsilon = 0.6, hide_labels = F)"},{"path":"https://jacobimarsh.github.io/crosshap/articles/hap_UMAP.html","id":"building-umap-gif","dir":"Articles","previous_headings":"","what":"Building UMAP GIF","title":"Haplotype UMAP GIF","text":"prepare_hap_umap() function crosshap takes UMAP results haplotype object built run_haplotyping() epsilon resolution builds plot individuals haplotype SNP alleles across UMAP. nsamples parameter match number unique frames final GIF. can changed depending number randomly sampled individuals ’d like haplotype. 25 default, however individuals may worth increasing, taking long run consider lowering value. NOTE: nsamples can include individual multiple times useful nsamples > nIndividuals within given haplotype. stage, plots frames individuals haplotypes stacked onto single image, ’ll need isolate . First, individuals separated different facets haplotype. , gganimate stagger images showing one individual haplotype time. Finally, animation rendered gifski_renderer(). Feel free experiment transition_length, state_length animate() display parameters find think best represents data.  GIF, dots represent SNPs MGumap, however now point coloured individual possesses alternate allele locus, dark grey SNPs unassigned Marker Groups light grey reference alleles. facet displays individuals share given haplotype. first facet shows Marker Group SNPs reference, ’s MGumap built . Individuals unassigned haplotype placed final ‘Unassigned’ facet. notice individuals within haplotype share majority alleles Marker Group SNPs. However, variability present across ‘noise’ SNPs assigned marker group individuals haplotype group. words, colours within facet stay , reflecting shared haplotypes MG SNPs, though background variation may differ. Congratulations building haplotype UMAP GIF visualization, go show friends!","code":"pre_anim_gg <- crosshap::prepare_hap_umap(umap_in,                             HapObject = HapObject,                             epsilon = 0.6,                             vcf = vcf,                             nsamples = 25) hap_gganim <- pre_anim_gg +   ggplot2::facet_wrap(~hap) +   gganimate::transition_states(Frame,                     transition_length = 0,                     state_length = 1)  gganimate::animate(   hap_gganim,   renderer = gganimate::gifski_renderer(),   fps = 3,   res = 1200,   width  = 6,   height = 6,   units = \"in\",   #NOTE: nframes = nsamples   nframes = 25 )  gganimate::anim_save(\"hap_animation.gif\")"},{"path":"https://jacobimarsh.github.io/crosshap/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jacob Marsh. Author, maintainer. Brady Johnston. Author. Jakob Petereit. Author.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marsh J, Johnston B, Petereit J (2024). crosshap: Local Haplotype Clustering Visualization. R package version 1.4.0, https://jacobimarsh.github.io/crosshap/.","code":"@Manual{,   title = {crosshap: Local Haplotype Clustering and Visualization},   author = {Jacob Marsh and Brady Johnston and Jakob Petereit},   year = {2024},   note = {R package version 1.4.0},   url = {https://jacobimarsh.github.io/crosshap/}, }"},{"path":[]},{"path":"https://jacobimarsh.github.io/crosshap/index.html","id":"what-does-it-do","dir":"","previous_headings":"","what":"What does it do?","title":"Local Haplotype Clustering and Visualization","text":"crosshap LD-based local haplotype analysis visualization tool. Given genomic variant data region interest, crosshap performs LD-based local haplotyping. Tightly linked variants clustered Marker Groups (MGs), individuals grouped local haplotypes shared allelic combinations MGs. Following , crosshap provides range visualization options examine relevant characteristics linked Marker Groups local haplotypes.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/index.html","id":"why-would-i-use-it","dir":"","previous_headings":"","what":"Why would I use it?","title":"Local Haplotype Clustering and Visualization","text":"crosshap originally designed explore local haplotype patterns may underlie phenotypic variability quantitative trait locus (QTL) regions. ideally suited complement follow-GWAS results (takes inputs). crosshap equips users tools explain region reported GWAS hit, variants causal candidates, populations present/absent , features populations. Alternatively, crosshap can simply tool identify patterns linkage among local variants, classify individuals based shared haplotypes. Note: crosshap designed -depth, user-driven analysis inheritance patterns specific regions interest, genome-wide scans.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Local Haplotype Clustering and Visualization","text":"crosshap available CRAN: latest features, can install development version crosshap GitHub :","code":"install.packages(\"crosshap\") # install.packages(\"devtools\") devtools::install_github(\"JacobIMarsh/crosshap\")"},{"path":"https://jacobimarsh.github.io/crosshap/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Local Haplotype Clustering and Visualization","text":"Documentation short, typical crosshap analysis workflow involves following steps. detailed explanation walk , see Getting started vignette. Read raw inputs Run local haplotyping range epsilon values Build clustering tree optimize epsilon value Visualize local haplotypes Marker Groups  can examine haplotype Marker Group features visualization, export relevant information haplotype object.","code":"read_vcf(region.vcf) read_LD(plink.ld) read_metadata(metadata.txt) read_pheno(pheno.txt) HapObject <- run_haplotyping(vcf, LD, metadata, pheno, epsilon, MGmin) clustree_viz(HapObject) crosshap_viz(HapObject, epsilon) HapObject$Haplotypes_MGmin30_E0.6$Indfile HapObject$Haplotypes_MGmin30_E0.6$Hapfile HapObject$Haplotypes_MGmin30_E0.6$Varfile"},{"path":"https://jacobimarsh.github.io/crosshap/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Local Haplotype Clustering and Visualization","text":"technical queries feel free contact : jacob.marsh@unc.edu . Please contact Prof. David Edwards queries: dave.edwards@uwa.edu.au .","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/HapObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Haplotype object — HapObject","title":"Example Haplotype object — HapObject","text":"haplotyping object created run_haplotyping() example cqProt-003 soy data","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/HapObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Haplotype object — HapObject","text":"","code":"HapObject"},{"path":"https://jacobimarsh.github.io/crosshap/reference/HapObject.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Haplotype object — HapObject","text":"haplotype (S3) object containing results needed haplotype visualization across five epsilon values (0.2,0.4,0.6,0.8,1) epsilon Epsilon value chosen haplotyping DBSCAN MGmin MGmin value (minPts) chosen haplotyping DBSCAN Hapfile Summary Marker Groups defining haplotype combinations Indfile Haplotype assignments individuals Varfile Marker Group assignments SNPs, additional calculated information","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/LD.html","id":null,"dir":"Reference","previous_headings":"","what":"Example LD matrix — LD","title":"Example LD matrix — LD","text":"pairwise R^2 linkage matrix generated PLINK example cqProt-003 soy data","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/LD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example LD matrix — LD","text":"","code":"LD"},{"path":"https://jacobimarsh.github.io/crosshap/reference/LD.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example LD matrix — LD","text":"square matrix read read_LD()","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/arith_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Mode utility function — arith_mode","title":"Mode utility function — arith_mode","text":"Mode utility function","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/arith_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mode utility function — arith_mode","text":"","code":"arith_mode(x)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/arith_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mode utility function — arith_mode","text":"x Input vector","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/arith_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mode utility function — arith_mode","text":"Mode numerical values","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_bot_halfeyeplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bot hap-pheno raincloud plot — build_bot_halfeyeplot","title":"Bot hap-pheno raincloud plot — build_bot_halfeyeplot","text":"build_bot_halfeyeplot() builds vertical plot displaying phenotypic scores individual, grouped haplotype, coloured metadata variable. Metadata groups can isolated using isolate_groups argument. Makes use $Indfile information haplotype object. internal function called crosshap_viz(), though can called separately build stand-alone plot.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_bot_halfeyeplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bot hap-pheno raincloud plot — build_bot_halfeyeplot","text":"","code":"build_bot_halfeyeplot(   HapObject,   epsilon,   hide_labels = TRUE,   isolate_group = NA )"},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_bot_halfeyeplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bot hap-pheno raincloud plot — build_bot_halfeyeplot","text":"HapObject Haplotype object created run_haplotyping(). epsilon Epsilon visualize haplotyping results . hide_labels TRUE, legend hidden. isolate_group Metadata group provided, Metadata groups masked plot. NOTE: change summary tables marker group phenotype scores.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_bot_halfeyeplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bot hap-pheno raincloud plot — build_bot_halfeyeplot","text":"ggplot2 object.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_bot_halfeyeplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bot hap-pheno raincloud plot — build_bot_halfeyeplot","text":"","code":"build_bot_halfeyeplot(HapObject, epsilon = 0.6, hide_labels = FALSE)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_left_alleleplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Left SNP-allele plot — build_left_alleleplot","title":"Left SNP-allele plot — build_left_alleleplot","text":"build_left_alleleplot() builds horizontal plot displaying mean allelic frequencies (reference/alternate/missing/heterozygous) SNP loci, grouped marker group. Makes use $Varfile information HapObject created run_haplotyping(). internal function called crosshap_viz(), though can called separately build stand-alone plot.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_left_alleleplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Left SNP-allele plot — build_left_alleleplot","text":"","code":"build_left_alleleplot(HapObject, epsilon, hide_labels = TRUE)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_left_alleleplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Left SNP-allele plot — build_left_alleleplot","text":"HapObject Haplotype object created run_haplotyping(). epsilon Epsilon matching haplotype object used umap_in. hide_labels TRUE, legend hidden.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_left_alleleplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Left SNP-allele plot — build_left_alleleplot","text":"ggplot2 object.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_left_alleleplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Left SNP-allele plot — build_left_alleleplot","text":"","code":"build_left_alleleplot(HapObject, epsilon = 0.6, hide_labels = FALSE)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_left_posplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Left SNP-position plot — build_left_posplot","title":"Left SNP-position plot — build_left_posplot","text":"build_left_alleleplot() builds horizontal plot displaying chromosomal position SNP locus, grouped marker group. Makes use $Varfile file haplotype object. internal function called crosshap_viz(), though can called separately build stand-alone plot.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_left_posplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Left SNP-position plot — build_left_posplot","text":"","code":"build_left_posplot(HapObject, epsilon, hide_labels = TRUE)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_left_posplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Left SNP-position plot — build_left_posplot","text":"HapObject Haplotype object created run_haplotyping(). epsilon Epsilon matching haplotype object used umap_in. hide_labels TRUE, legend hidden.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_left_posplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Left SNP-position plot — build_left_posplot","text":"ggplot2 object.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_left_posplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Left SNP-position plot — build_left_posplot","text":"","code":"build_left_posplot(HapObject, epsilon = 0.6, hide_labels = FALSE)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_mid_dotplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Middle MG/hap dot plot — build_mid_dotplot","title":"Middle MG/hap dot plot — build_mid_dotplot","text":"build_mid_dotplot() builds central dot plot displaying relationship haplotype combinations characteristic marker group alleles define . Makes use $Hapfile information haplotype object. internal function called crosshap_viz(), though can called separately build stand-alone plot (can useful patched peripheral plot).","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_mid_dotplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Middle MG/hap dot plot — build_mid_dotplot","text":"","code":"build_mid_dotplot(HapObject, epsilon, hide_labels = FALSE)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_mid_dotplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Middle MG/hap dot plot — build_mid_dotplot","text":"HapObject Haplotype object created run_haplotyping epsilon Epsilon visualize haplotyping results . hide_labels TRUE, legend hidden.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_mid_dotplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Middle MG/hap dot plot — build_mid_dotplot","text":"ggplot2 object.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_mid_dotplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Middle MG/hap dot plot — build_mid_dotplot","text":"","code":"build_mid_dotplot(HapObject, epsilon = 0.6, hide_labels = FALSE)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_right_clusterplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Right intra-cluster linkage plot — build_right_clusterplot","title":"Right intra-cluster linkage plot — build_right_clusterplot","text":"build_right_jitterplot() builds horizontal plot displaying mean pairwise R^2 linkage SNP SNPs marker group, grouped marker group, coloured alternate allele frequency. Makes use $Varfile information haplotyping object. internal function called crosshap_viz(), though can called separately build stand-alone plot.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_right_clusterplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Right intra-cluster linkage plot — build_right_clusterplot","text":"","code":"build_right_clusterplot(HapObject, epsilon, hide_labels = FALSE)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_right_clusterplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Right intra-cluster linkage plot — build_right_clusterplot","text":"HapObject Haplotype object created run_haplotyping(). epsilon Epsilon visualize haplotyping results . hide_labels TRUE, legend hidden.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_right_clusterplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Right intra-cluster linkage plot — build_right_clusterplot","text":"ggplot2 object.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_right_clusterplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Right intra-cluster linkage plot — build_right_clusterplot","text":"","code":"build_right_clusterplot(HapObject, epsilon = 0.6, hide_labels = FALSE)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_right_phenoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Right SNP-pheno phenoplot — build_right_phenoplot","title":"Right SNP-pheno phenoplot — build_right_phenoplot","text":"build_right_phenoplot() builds horizontal plot displaying mean difference phenotype score individuals alternate vs reference alleles SNP locus, grouped marker group, coloured alternate allele frequency SNP. Makes use $Varfile phenotypic information haplotyping object. internal function called crosshap_viz(), though can called separately build stand-alone plot.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_right_phenoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Right SNP-pheno phenoplot — build_right_phenoplot","text":"","code":"build_right_phenoplot(HapObject, epsilon, hide_labels = TRUE)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_right_phenoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Right SNP-pheno phenoplot — build_right_phenoplot","text":"HapObject Haplotype object created run_haplotyping(). epsilon Epsilon visualize haplotyping results . hide_labels TRUE, legend hidden.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_right_phenoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Right SNP-pheno phenoplot — build_right_phenoplot","text":"ggplot2 object.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_right_phenoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Right SNP-pheno phenoplot — build_right_phenoplot","text":"","code":"build_right_phenoplot(HapObject, epsilon = 0.6, hide_labels = FALSE)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_summary_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Hap/MG summary tables — build_summary_tables","title":"Hap/MG summary tables — build_summary_tables","text":"build_summary_tables() builds summary tables haplotype Marker Group information shown peripheral crosshap plots. internal function called crosshap_viz(), though can called separately build stand-along grob tables.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_summary_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hap/MG summary tables — build_summary_tables","text":"","code":"build_summary_tables(HapObject, epsilon)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_summary_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hap/MG summary tables — build_summary_tables","text":"HapObject Haplotype object created run_haplotyping(). epsilon Epsilon visualize haplotyping results .","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_summary_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hap/MG summary tables — build_summary_tables","text":"list containing two TableGrob objects.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_top_metaplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Top metadata-hap bar plot — build_top_metaplot","title":"Top metadata-hap bar plot — build_top_metaplot","text":"build_top_metaplot() builds vertical stacked bar plot displaying frequency haplotype combination, broken categorical metadata variable provided. Makes use $Indfile information haplotype object. internal function called crosshap_viz(), though can called separately build stand-alone plot","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_top_metaplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top metadata-hap bar plot — build_top_metaplot","text":"","code":"build_top_metaplot(HapObject, epsilon, hide_labels = FALSE)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_top_metaplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top metadata-hap bar plot — build_top_metaplot","text":"HapObject Haplotype object created run_haplotyping() epsilon Epsilon visualize haplotyping results . hide_labels TRUE, legend hidden.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_top_metaplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Top metadata-hap bar plot — build_top_metaplot","text":"ggplot2 object.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/build_top_metaplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Top metadata-hap bar plot — build_top_metaplot","text":"","code":"build_top_metaplot(HapObject, epsilon = 0.6, hide_labels = FALSE)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/clustree_viz.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering tree — clustree_viz","title":"Clustering tree — clustree_viz","text":"clustree_viz() builds clustering tree displaying changes haplotype assignment individuals changes Marker Group assignment SNPs, across different epsilon values. function `clustree` wrapper.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/clustree_viz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering tree — clustree_viz","text":"","code":"clustree_viz(HapObject, type = \"MG\")"},{"path":"https://jacobimarsh.github.io/crosshap/reference/clustree_viz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering tree — clustree_viz","text":"HapObject haplotyping object range results different epsilons created run_haplotyping() type type = \"hap\", nodes represent haplotype populations, type = \"MG\", nodes represent marker groups.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/clustree_viz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering tree — clustree_viz","text":"ggplot2 object.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/crosshap-package.html","id":null,"dir":"Reference","previous_headings":"","what":"crosshap: Local Haplotype Clustering and Visualization — crosshap-package","title":"crosshap: Local Haplotype Clustering and Visualization — crosshap-package","text":"local haplotyping visualization toolbox capture major patterns co-inheritance clusters linked variants, whilst connecting findings phenotypic demographic traits across individuals. 'crosshap' enables users explore understand genomic variation across trait-associated region. example successful local haplotype analysis, see Marsh et al. (2022) doi:10.1007/s00122-022-04045-8 .","code":""},{"path":[]},{"path":"https://jacobimarsh.github.io/crosshap/reference/crosshap-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"crosshap: Local Haplotype Clustering and Visualization — crosshap-package","text":"Maintainer: Jacob Marsh jake.marsh@live.com.au (ORCID) Authors: Brady Johnston brady.johnston@.com (ORCID) Jakob Petereit petinho86@gmail.com (ORCID)","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/crosshap_viz.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize haplotypes — crosshap_viz","title":"Visualize haplotypes — crosshap_viz","text":"crosshap_viz() builds five individual plots using various elements HapObject created run_haplotyping(). central dotplot displays relationship clusters linked SNPs (Marker Groups), distinct haplotypes present within population. Vertical plots (top/bottom) visualize individuals populations, grouped haplotype. Horizontal plots (left/right) visualize SNP information, grouped Marker Group cluster.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/crosshap_viz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize haplotypes — crosshap_viz","text":"","code":"crosshap_viz(   HapObject,   epsilon,   plot_left = \"allele\",   plot_right = \"pheno\",   hide_labels = FALSE,   isolate_group = NA )"},{"path":"https://jacobimarsh.github.io/crosshap/reference/crosshap_viz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize haplotypes — crosshap_viz","text":"HapObject Haplotype object created run_haplotyping(). epsilon Epsilon visualize haplotyping results . plot_left plot_left = \"allele\", SNP allele frequency information displayed, plot_left = \"pos\", SNP position information displayed. plot_right plot_right = \"pheno\", phenotype associations SNPs displayed, plot_right = \"cluster\", internal marker group linkage displayed. hide_labels TRUE, legends plots hidden. isolate_group one Metadata groups provided, Metadata groups masked plot. NOTE: change summary tables marker group phenotype scores.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/crosshap_viz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize haplotypes — crosshap_viz","text":"patchwork object.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/mean_na.rm.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean utility function — mean_na.rm","title":"Mean utility function — mean_na.rm","text":"Mean utility function","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/mean_na.rm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean utility function — mean_na.rm","text":"","code":"mean_na.rm(x)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/mean_na.rm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean utility function — mean_na.rm","text":"x Input vector","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/mean_na.rm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean utility function — mean_na.rm","text":"Mean numerical values","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Domestication metadata — metadata","title":"Example Domestication metadata — metadata","text":"Metadata file level domestication individual example cqProt-003 soy data","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Domestication metadata — metadata","text":"","code":"metadata"},{"path":"https://jacobimarsh.github.io/crosshap/reference/metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Domestication metadata — metadata","text":"two-column tibble read read_metadata()","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Domestication metadata — metadata","text":"https://doi.org/10.1007/s00122-022-04045-8","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/pheno.html","id":null,"dir":"Reference","previous_headings":"","what":"Example phenotype data — pheno","title":"Example phenotype data — pheno","text":"Seed protein scores individual example cqProt-003 soy data","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/pheno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example phenotype data — pheno","text":"","code":"pheno"},{"path":"https://jacobimarsh.github.io/crosshap/reference/pheno.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example phenotype data — pheno","text":"two-column tibble read read_pheno()","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/pheno.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example phenotype data — pheno","text":"https://doi.org/10.1007/s00122-022-04045-8","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://jacobimarsh.github.io/crosshap/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/prepare_hap_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"UMAP haplotype visualization helper — prepare_hap_umap","title":"UMAP haplotype visualization helper — prepare_hap_umap","text":"prepare_hap_umap() builds large composite ggplot2 object ready faceting animation (see vignette) visualizing SNP alleles (coloured Marker Group) possessed individuals haplotype. UMAP coordinates SNP can generated using umap::umap(), LD matrix generated run_haplotyping() input. fully rendered faceted, resultant GIF intuitively visualizes shared loci within Marker Group constant within haplotype combination.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/prepare_hap_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UMAP haplotype visualization helper — prepare_hap_umap","text":"","code":"prepare_hap_umap(   umap_in,   hetmiss_as = \"allele\",   HapObject,   epsilon,   vcf,   nsamples = 25 )"},{"path":"https://jacobimarsh.github.io/crosshap/reference/prepare_hap_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UMAP haplotype visualization helper — prepare_hap_umap","text":"umap_in UMAP results produced haplotype object given epsilon. hetmiss_as hetmiss_as = \"allele\", heterozygous-missing SNPs './N' recoded 'N/N', hetmiss_as = \"miss\", site recoded missing. HapObject Haplotype object created run_haplotyping(). epsilon Epsilon matching haplotype object used umap_in. vcf Input vcf. nsamples Number times sample haplotype group, directly translate number frames animation. nframes passed gganimate::animate().","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/prepare_hap_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UMAP haplotype visualization helper — prepare_hap_umap","text":"large ggplot2 object.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/pseudo_haps.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify haplotypes from clustered SNPs — pseudo_haps","title":"Identify haplotypes from clustered SNPs — pseudo_haps","text":"pseudo_haps() calls common allelic states SNP marker group across individuals, building dummy SNPs marker group mimic binary vcf format. step determines haplotype combinations, therefore enables several summaries returned - contained $Hapfile preliminary $Indfile finalised $MGfile, following marker group smoothing. internal function intended external use.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/pseudo_haps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify haplotypes from clustered SNPs — pseudo_haps","text":"","code":"pseudo_haps(preMGfile, bin_vcf, minHap, LD, keep_outliers)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/pseudo_haps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify haplotypes from clustered SNPs — pseudo_haps","text":"preMGfile SNP clusters DBscan. bin_vcf Binary VCF region interest reformatted run_haplotyping(). minHap Minimum size (nIndividuals) keep haplotype combinations LD LD matrix input. keep_outliers FALSE, marker group smoothing performed remove outliers.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/pseudo_haps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify haplotypes from clustered SNPs — pseudo_haps","text":"Returns intermediate haplotype object","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_LD.html","id":null,"dir":"Reference","previous_headings":"","what":"Read LD correlation matrix to tibble — read_LD","title":"Read LD correlation matrix to tibble — read_LD","text":"correlation matrix rownames column names, VCF need provided can added read_LD().","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_LD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read LD correlation matrix to tibble — read_LD","text":"","code":"read_LD(LDin, vcf = NULL)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_LD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read LD correlation matrix to tibble — read_LD","text":"LDin Square correlation matrix vcf VCF object created read_vcf() can used assign column names","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_LD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read LD correlation matrix to tibble — read_LD","text":"tibble.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Read metadata to tibble — read_metadata","title":"Read metadata to tibble — read_metadata","text":"Requires two column text file without header (Ind | Metadata)","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read metadata to tibble — read_metadata","text":"","code":"read_metadata(Metain)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read metadata to tibble — read_metadata","text":"Metain Input phenotype file","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read metadata to tibble — read_metadata","text":"tibble.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_pheno.html","id":null,"dir":"Reference","previous_headings":"","what":"Read phenotype data to tibble — read_pheno","title":"Read phenotype data to tibble — read_pheno","text":"Requires two column text file without header (Ind | Pheno)","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_pheno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read phenotype data to tibble — read_pheno","text":"","code":"read_pheno(Phenoin)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_pheno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read phenotype data to tibble — read_pheno","text":"Phenoin Input phenotype file","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_pheno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read phenotype data to tibble — read_pheno","text":"tibble.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_vcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read VCF to tibble — read_vcf","title":"Read VCF to tibble — read_vcf","text":"Dashes,'-', individual names recoded '.' downstream compatability.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_vcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read VCF to tibble — read_vcf","text":"","code":"read_vcf(VCFin)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_vcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read VCF to tibble — read_vcf","text":"VCFin Input VCF","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/read_vcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read VCF to tibble — read_vcf","text":"tibble.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/run_haplotyping.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster SNPs and identify haplotypes — run_haplotyping","title":"Cluster SNPs and identify haplotypes — run_haplotyping","text":"run_haplotyping() performs density-based clustering SNPs region interest identify Marker Groups. Individuals classified haplotype combination based shared combinations Marker Group alleles. Returns haplotyping object (HapObject), can used input build clustering tree epsilon optimization using clustree_viz(), can visualized reference phenotype metadata using crosshap_viz().","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/run_haplotyping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster SNPs and identify haplotypes — run_haplotyping","text":"","code":"run_haplotyping(   vcf,   LD,   pheno,   metadata = NULL,   epsilon = c(0.2, 0.4, 0.6, 0.8, 1),   MGmin = 30,   minHap = 9,   hetmiss_as = \"allele\",   het_phenos = FALSE,   keep_outliers = FALSE )"},{"path":"https://jacobimarsh.github.io/crosshap/reference/run_haplotyping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster SNPs and identify haplotypes — run_haplotyping","text":"vcf Input VCF region interest. LD Pairwise correlation matrix SNPs region (e.g. PLINK). pheno Input numeric phenotype data individual. metadata Metadata input (optional). epsilon Epsilon values clustering SNPs DBscan. MGmin Minimum SNPs marker groups, MinPts parameter DBscan. minHap Minimum nIndividuals haplotype combination. hetmiss_as hetmiss_as = \"allele\", heterozygous-missing SNPs './N' recoded 'N/N', hetmiss_as = \"miss\", site recoded missing. het_phenos FALSE, phenotype associations SNPs calculated reference alternate allele individuals , TRUE, heterozygous individuals included assuming additive allele effects. keep_outliers FALSE, marker group smoothing performed remove outliers.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/run_haplotyping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster SNPs and identify haplotypes — run_haplotyping","text":"comprehensive haplotyping S3 object (HapObject) provided epsilon value, needed clustree_viz() crosshap_viz().","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/run_hdbscan_haplotyping.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster SNPs with HDBSCAN and identify haplotypes — run_hdbscan_haplotyping","title":"Cluster SNPs with HDBSCAN and identify haplotypes — run_hdbscan_haplotyping","text":"run_hdbscan_haplotyping() performs HDBSCAN clustering SNPs region interest identify marker groups. Individuals classified haplotype combination based shared combinations marker group alleles. Returns comprehensive haplotyping object (HapObject), can visualized reference phenotype metadata using crosshap_viz() (set epsilon 1 dummy value).","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/run_hdbscan_haplotyping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster SNPs with HDBSCAN and identify haplotypes — run_hdbscan_haplotyping","text":"","code":"run_hdbscan_haplotyping(   vcf,   LD,   pheno,   MGmin,   minHap = 5,   hetmiss_as = \"allele\",   metadata = NULL,   keep_outliers = FALSE )"},{"path":"https://jacobimarsh.github.io/crosshap/reference/run_hdbscan_haplotyping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster SNPs with HDBSCAN and identify haplotypes — run_hdbscan_haplotyping","text":"vcf Input VCF region interest. LD Pairwise correlation matrix SNPs region (e.g. PLINK). pheno Input numeric phenotype data individual. MGmin Minimum SNPs marker groups, MinPts parameter DBscan. minHap Minimum nIndividuals haplotype combination. hetmiss_as hetmiss_as = \"allele\", heterozygous-missing SNPs './N' recoded 'N/N', hetmiss_as = \"miss\", site recoded missing. metadata Metadata input (optional). keep_outliers FALSE, marker group smoothing performed remove outliers.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/run_hdbscan_haplotyping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster SNPs with HDBSCAN and identify haplotypes — run_hdbscan_haplotyping","text":"comprehensive haplotyping S3 object (HapObject) provided epsilon value, needed clustree_viz() crosshap_viz().","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/tagphenos.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate SNP phenotypic associations — tagphenos","title":"Calculate SNP phenotypic associations — tagphenos","text":"tagphenos() reports frequency allele types SNP calculates phenotype associations different alleles, returning information $Varfile HapObject. internal function intended external use.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/tagphenos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate SNP phenotypic associations — tagphenos","text":"","code":"tagphenos(MGfile, bin_vcf, pheno, het_phenos = FALSE)"},{"path":"https://jacobimarsh.github.io/crosshap/reference/tagphenos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate SNP phenotypic associations — tagphenos","text":"MGfile SNP marker groups clustered using DBscan. bin_vcf Binary VCF region interest reformatted run_haplotyping(). pheno Input numeric phenotype data individual. het_phenos FALSE, phenotype associations SNPs calculated reference alternate allele individuals , TRUE, heterozygous individuals included assuming additive allele effects.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/tagphenos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate SNP phenotypic associations — tagphenos","text":"Returns intermediate haplotype object.","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/vcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Example VCF — vcf","title":"Example VCF — vcf","text":"VCF containing SNPs example cqProt-003 soy data","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/vcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example VCF — vcf","text":"","code":"vcf"},{"path":"https://jacobimarsh.github.io/crosshap/reference/vcf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example VCF — vcf","text":"VCF read read_vcf()","code":""},{"path":"https://jacobimarsh.github.io/crosshap/reference/vcf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example VCF — vcf","text":"https://doi.org/10.1007/s00122-022-04045-8","code":""}]
